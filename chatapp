from Chat_Prompt import *
from pathlib import Path

# Otherwise, fallback to an environment variable, or a placeholder string.
OPENAI_API_KEY = st.secrets['api_key']
DATABASE_PATH = "restaurant_sales.sqlite3"
MODEL = 'gpt-4o'

def get_db_path(filename):
    db_path = Path(__file__).parents[0] / filename
    return db_path.__str__()

def get_conn(filename):
    db_path = get_db_path(filename)
    conn = sqlite3.connect(db_path)
    return conn

conn = get_conn(DATABASE_PATH)

def main():
    st.title("Restaurant Pricing Analyst")

    # Initialize session state for chat messages
    if "messages" not in st.session_state:
        st.session_state["messages"] = []

        # Provide a welcome message from the "assistant" role:
        welcome_message = (
            "Hello, and welcome to the **Restaurant Pricing Analyst**!\n\n"
            "I'm here to help you explore restaurant sales data and elasticity. "
            "Below are some **sample questions** you might ask:\n"
            "- *Which store has the highest NetSales?*\n"
            "- *What is the sales-weighted elasticity for each Category?*\n"
            "- *Which item descriptions have the largest NetUnits sold?*\n\n"
            "You can ask about any of these columns:\n"
            "**Store**, **Category**, **SubCategory**, **ItemDescription**, "
            "**Elasticity**, **NetUnits**, **NetSales**.\n\n"
            "Feel free to experiment by typing your question in the chat box below!"
        )

        st.session_state["messages"].append({"role": "assistant", "content": welcome_message})

        # Now display the conversation
        for msg in st.session_state["messages"]:
            if msg["role"] == "user":
                with st.chat_message("user"):
                    st.write(msg["content"])

            elif msg["role"] == "assistant":
                with st.chat_message("assistant"):
                    st.write(msg["content"])

    # Streamlit now provides a 'chat_input' widget (available in Streamlit >= 1.23).
    # If your Streamlit version is older, you can use st.text_input in a loop.
    user_query = st.chat_input("Ask a question about the restaurant data...")

    if user_query:
        # (1) User typed a message -> add it to session
        st.session_state["messages"].append({"role": "user", "content": user_query})
        
        # (2) Use our pipeline to handle the question
        try:
            answer = handle_user_question(conn, OPENAI_API_KEY, user_query, MODEL)
        except Exception as e:
            answer = f"An error occurred: {e}"
        
        # (3) Store the assistant's response in session
        st.session_state["messages"].append({"role": "assistant", "content": answer})

        # Now display the conversation
        for msg in st.session_state["messages"]:
            if msg["role"] == "user":
                with st.chat_message("user"):
                    st.write(msg["content"])
            elif msg["role"] == "assistant":
                with st.chat_message("assistant"):
                    st.write(msg["content"])
        


if __name__ == "__main__":
    main()
